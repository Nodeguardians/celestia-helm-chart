---
# Default values for deploying Celestia
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

##
global:
  ## Celestia node chain-id
  ##
  chainId: mocha
  name: celestia

  ## Deploy pods on a specific node-pool if enabled
  ##
  nodePool:
    enabled: false
    ## If enabled, provide kv pair for node-pool affinity
    # key: "env"
    # value: "prod"

  ## Override the deployment namespace
  ##
  namespaceOverride: ""

  ## Common labels for chart resources
  ##
  labels:
    app.kubernetes.io/instance: "celestia"
    app.kubernetes.io/name: "celestia"
    app.kubernetes.io/component: "celestia"
    app.kubernetes.io/managed-by: "helm"

## Init container script for Celestia App
##
appInitContainer:
  configmapName: init-celestia-app
  scriptName: init-celestia-app.sh

## Init container script for Celestia Node
##
nodeInitContainer:
  configmapName: init-celestia-node
  scriptName: init-celestia-node.sh

## Celestia App node configuration
##
celestiaApp:

  ## celestia App docker image
  ##
  image:
    registry: registry.hub.docker.com
    repository: jeremymc99
    name: celestia-app
    tag: v0.11.1
    pullPolicy: IfNotPresent

  ## Celestia App home directory
  ##
  home:
    ## Path to Celestia home directory
    ##
    path: "/{{ .Values.global.name }}/.celestia-appd"

    ## Celestia App home directory Persistent Volume configuration
    ##
    volume:
      name: "{{ .Values.global.name }}-{{ .Values.global.chainId }}-app-pvc-01"
      accessMode: ReadWriteOnce
      storageClass: standard
      storage: 100Gi

  ## Deploy a Load Balancer for Celestia App RPC endpoint
  ##
  rpcLoadBalancer: false

  ## Celestia App node ports - will open them in the Statefulset and create dedicated service for each ones
  #
  # All Service we be deployed as ClusterIp, except P2P that will be LoadBalancer and RPC one if .Values.celestia.rpcLoadBalancer is set to true
  #
  ##
  ports:
    grpc:
      port: 9090
      name: "grpc"
    p2p:
      port: 26656
      name: "p2p"
    rpc:
      port: 26657
      name: "rpc"
    metrics:
      port: 26660
      name: "metrics"

  ## Configuration files for the Celestia node
  ##
  files:

    ## Files to store to the /data folder (.celestia-appd/data/)
    ##
    data:
      - name: validator-state-json
        fileName: priv_validator_state.json

    ## Files to store to the /config folder (.celestia-appd/config/)
    ##
    config:
      - name: app-toml
        fileName: app.toml
      - name: config-toml
        fileName: config.toml
      - name: client-toml
        fileName: client.toml
      ## You can provide the address-book directly
      ##
      - name: address-book
        fileName: addrbook.json

    ## You can provide your celestia-app node_key.json file using a secret, if not one will be generated at start
    ##
    nodeKey:
      existingSecret: ""

    ## You can provide your celestia-app priv_validator_key.json file using a secret
    #  /!\ warning: not recommended for valdidator, use remote signer instead (see Horcrux or TMKMS)
    ##
    privateValidatorKey:
      existingSecret: ""

  ## Enable quick sync (it will download a <24h snapshot in an initContainer before starting the node)
  ##
  snapshotQuickSync:
    enabled: false

  ## Define resources requests and limits for single Pods.
  ##
  resources: {}
  # requests:
  #   cpu: 200m
  #   memory: 10Gi
  # limits:
  #   memory: 10Gi

## Celestia Node configuration
##
celestiaNode:
  enabled: true

  ## There are 3 different type of nodes: bridge, light and full.
  #  note: when running a validator it's recommended to run a bridge node also
  ##
  type: bridge

  ## Celestia node binary
  #  Warning: before v0.8.0 binary is in root folder (not inside /bin folder) so you will need to specifcy `./celestia` to use it
  #  After v0.8.0 set to 'celestia' or '/bin/celestia'
  binary: ./celestia

  ## Node network (caution could be different from chain-id)
  ##
  network: mocha

  ## Quantum Gravity Bridge address
  ##
  ethereumAddress: ""

  ## celestia node docker image
  ##
  image:
    registry: ghcr.io
    repository: celestiaorg
    name: celestia-node
    tag: sha-747c9e5  #tag for v0.6.4
    pullPolicy: IfNotPresent

  ## Celestia Node ports - will open them in the Statefulset and create dedicated ClusterIp service for each ones
  ##
  ports:
    rpc:
      port: 26658
      name: rpc

  ## Celestia Node home directory
  ##
  home:
    ## Path to node store
    ##
    path: "/root/.celestia-{{ .Values.celestiaNode.type }}-{{ .Values.global.chainId }}"

    ## Node store Persistent Volume configuration
    ##
    volume:
      name: "{{ .Values.global.name }}-{{ .Values.global.chainId }}-{{ .Values.celestiaNode.type }}-pvc-01"
      accessMode: ReadWriteOnce
      storageClass: standard
      storage: 100Gi

  ## Configuration file for Celestia Node
  ##
  config:
    file: config.toml
    configmapName: node-config-toml

  ## IP address used to communicate with the celestia-app node
  coreIp: localhost

  ## Celestia Node cel-key
  ##
  celKey:
    ## If not enabled, a cel-key will be generated for you at node start
    ##
    enabled: false

  ## If .Values.celestiaNode.celkey.enabled is true, then you will need to provide secret names and file names of your key files (see README)
  # address:
  #   secretName: "celkey-address"
  #   fileName: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.address"
  # validatorInfo:
  #   secretName: "celkey-validator-info"
  #   fileName: "my_celes_key.info"

  ## Define resources requests and limits for single Pods.
  ##
  resources: {}
  # requests:
  #   cpu: 200m
  #   memory: 10Gi
  # limits:
  #   memory: 10Gi

## Prometheus configuration to collect metrics - it will deploy a ServiceMonitor and RBAC resources to allow Prometheus server to collect Celestia node metrics
##
monitoring:
  enabled: false
  namespace: monitoring
  labels:
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/instance: k8s
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: kube-prometheus
    app: "celestia"
